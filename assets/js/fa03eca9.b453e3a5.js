"use strict";(self.webpackChunkguide=self.webpackChunkguide||[]).push([[645],{7787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=n(4848),d=n(8453);const s={sidebar_position:4},o="Replacing with the Linker",r={id:"guide/methods/link",title:"Replacing with the Linker",description:"This method involves linking test-specific code instead of the product code during the build process. Since the product code remains untouched and the process is simple, this approach is recommended whenever possible.",source:"@site/docs/guide/methods/link.md",sourceDirName:"guide/methods",slug:"/guide/methods/link",permalink:"/embeded-testing-guide/docs/guide/methods/link",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide/methods/link.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Replacing with Compile Switches",permalink:"/embeded-testing-guide/docs/guide/methods/compile-switch"},next:{title:"Replacing with Function Pointers",permalink:"/embeded-testing-guide/docs/guide/methods/functional-pointer"}},c={},l=[];function a(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"replacing-with-the-linker",children:"Replacing with the Linker"})}),"\n",(0,i.jsx)(t.p,{children:"This method involves linking test-specific code instead of the product code during the build process. Since the product code remains untouched and the process is simple, this approach is recommended whenever possible."}),"\n",(0,i.jsxs)(t.p,{children:["Example: Testing product code that contains ",(0,i.jsx)(t.code,{children:"LedCtrl_LedON()"}),", which only works on the actual board."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-c",metastring:'title="Product Code ledCtrl.h"',children:'#include "ledCtrl.h"\n\nvoid turnOnRedLED(void) {\n    LedCtrl_LedON(3);\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-c",metastring:'title="Product Code ledCtrl.c"',children:"static uint8_t led_value;\n\n// Set value in register\nvoid LedCtrl_LedON(uint8_t ledNo) {\n    led_value = led_value | (1 << n);\n    LED_RESISTER = led_value;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"If you just want to build the code, link a file with a dummy implementation during the build process."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-c",metastring:'title="Test Double(dummy) ledCtrl.c"',children:"void LedCtrl_LedON(uint8_t ledNo) {\n    // do nothing\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"Instead of a dummy, you can use a spy to write a test that verifies if LED 3 is turned on."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-c",metastring:'title="est Double(spy) ledCtrl.c"',children:"static uint8_t led_value;\n\nvoid LedCtrl_LedON(uint8_t ledNo) {\n    led_value = led_value | (1 << n);\n}\n\nuint8_t LedCtrl_GetLedValue(){\n    return led_value;\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const d={},s=i.createContext(d);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);