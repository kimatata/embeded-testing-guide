"use strict";(self.webpackChunkguide=self.webpackChunkguide||[]).push([[489],{4743:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var o=n(4848),r=n(8453);const s=n.p+"assets/images/exec-5293f2db9bc4ef4eb2bbe662bd9fe7c0.png",c=n.p+"assets/images/coverage-724d1defc1bfaac06b9881dd5d9df3c3.png",i=n.p+"assets/images/coverageDetail-ec87d768bae247c60db6a17f22dae314.png",a={sidebar_position:3},d="Test Execution Script",l={id:"environment/exec",title:"Test Execution Script",description:"For the sample code in this repository, runTests.sh allows you to easily build the test executable, run the tests, and generate coverage output.",source:"@site/docs/environment/exec.md",sourceDirName:"environment",slug:"/environment/exec",permalink:"/embeded-testing-guide/docs/environment/exec",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/environment/exec.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Building Test Code",permalink:"/embeded-testing-guide/docs/environment/build"},next:{title:"(Reference) Setting Up a Linux Environment Using WSL2",permalink:"/embeded-testing-guide/docs/environment/wsl"}},h={},u=[{value:"Running the Tests",id:"running-the-tests",level:2},{value:"Generating Coverage Reports",id:"generating-coverage-reports",level:2}];function g(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",sup:"sup",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"test-execution-script",children:"Test Execution Script"})}),"\n",(0,o.jsxs)(t.p,{children:["For the sample code in this repository, ",(0,o.jsx)(t.code,{children:"runTests.sh"})," allows you to easily build the test executable, run the tests, and generate coverage output."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",metastring:'title="code/runTests.sh"',children:'#!/bin/bash\n\n# check coverage flag\nif [ "$1" == "--coverage" ]; then\n    echo "Coverage mode enabled."\n    COVERAGE_FLAGS="-DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage"\nelse\n    echo "Running tests without coverage."\n    COVERAGE_FLAGS=""\nfi\n\n# build\ncd test/test\ncmake $COVERAGE_FLAGS CMakeLists.txt\nmake\n\n# run test suites\n./runTests\n\n# if coverage enabled, generate coverage report\nif [ "$1" == "--coverage" ]; then\n    echo "Generating coverage report..."\n    # create coverage directory\n    mkdir -p ../../coverage\n    # colect coverage info\n    lcov --capture --directory . --output-file coverage.info\n    # remove test code, google test code, and other library code coverage from report\n    lcov --remove coverage.info \'/usr/*\' \'*/gtest/*\' \'*/gmock/*\' \'*/test/*\' --output-file coverage_filtered.info\n    # generate coverage report\n    genhtml coverage_filtered.info --output-directory ../../coverage\n    echo "Coverage report generated in root/coverage directory."\nfi\n'})}),"\n",(0,o.jsx)(t.h2,{id:"running-the-tests",children:"Running the Tests"}),"\n",(0,o.jsx)(t.p,{children:"If you only want to run the tests, execute the script as shown below:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"cd code\nbash runTests.sh\n"})}),"\n",(0,o.jsx)(t.p,{children:"The test results will be displayed in the terminal."}),"\n",(0,o.jsx)("img",{src:s,alt:"exec",width:"700"}),"\n",(0,o.jsx)(t.h2,{id:"generating-coverage-reports",children:"Generating Coverage Reports"}),"\n",(0,o.jsxs)(t.p,{children:["If you want to generate a coverage report in addition to running the tests, execute the script with the ",(0,o.jsx)(t.code,{children:"coverage"})," option as shown below:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"cd code\nbash runTests.sh --coverage\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The coverage report will be output as an HTML file under code/coverage by the coverage tool lcov",(0,o.jsx)(t.sup,{children:(0,o.jsx)(t.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})}),".\nYou can check the coverage for each file."]}),"\n",(0,o.jsx)("img",{src:c,alt:"coverage",width:"700"}),"\n",(0,o.jsx)(t.p,{children:"Clicking on the links for each file will show how many times each line has been executed."}),"\n",(0,o.jsx)("img",{src:i,alt:"coverageDetail",width:"700"}),"\n","\n",(0,o.jsxs)(t.section,{"data-footnotes":!0,className:"footnotes",children:[(0,o.jsx)(t.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{id:"user-content-fn-1",children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://github.com/linux-test-project/lcov",children:"https://github.com/linux-test-project/lcov"})," ",(0,o.jsx)(t.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var o=n(6540);const r={},s=o.createContext(r);function c(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);