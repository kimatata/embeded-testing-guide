"use strict";(self.webpackChunkguide=self.webpackChunkguide||[]).push([[820],{105:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var i=t(4848),o=t(8453);const s={sidebar_position:6},r="Replacing with Function Pointers",l={id:"how-to-break-dependency/functional-pointer",title:"Replacing with Function Pointers",description:'There are cases where you want to alternate between product code and test doubles on a per-test-case basis within a single test suite executable. In such cases, you can use "replacing with function pointers."',source:"@site/docs/how-to-break-dependency/functional-pointer.md",sourceDirName:"how-to-break-dependency",slug:"/how-to-break-dependency/functional-pointer",permalink:"/embeded-testing-guide/docs/how-to-break-dependency/functional-pointer",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/how-to-break-dependency/functional-pointer.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Replacing with Mocks",permalink:"/embeded-testing-guide/docs/how-to-break-dependency/mock"},next:{title:"Installing Google Test",permalink:"/embeded-testing-guide/docs/setup/googletest"}},c={},a=[{value:"How to Switch with Function Pointers",id:"how-to-switch-with-function-pointers",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"replacing-with-function-pointers",children:"Replacing with Function Pointers"})}),"\n",(0,i.jsx)(n.p,{children:'There are cases where you want to alternate between product code and test doubles on a per-test-case basis within a single test suite executable. In such cases, you can use "replacing with function pointers."'}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:'Since this method can make the code harder to read, use "replacing with the linker" when you don\'t need to switch between product code and test doubles.'})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-switch-with-function-pointers",children:"How to Switch with Function Pointers"}),"\n",(0,i.jsx)(n.p,{children:"Consider the following function for registering a file write queue to USB drive:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",metastring:'title="original function declaration"',children:"void FileCtrl_EnQueue(ST_QUEUE_ELEMENT* el)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To alternate between the product code ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue_Real"})," and the test double ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue_Mock"}),", change the function declaration to a function pointer declaration."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",metastring:'title="function declaration using function pointer"',children:"extern void (*FileCtrl_EnQueue)(ST_QUEUE_ELEMENT* el);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By assigning the function pointer ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue_Real"})," of the product code to ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue"}),", calls to ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue()"})," are routed to ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue_Real()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",metastring:'title="Product Code FileManager.c"',children:"void FileCtrl_EnQueue_Real(ST_QUEUE_ELEMENT* el) {\n    // Processing that runs on the actual microcontroller\n}\nvoid (*FileCtrl_EnQueue)(ST_QUEUE_ELEMENT* el) = FileCtrl_EnQueue_Real;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In test cases where you want to use the test double ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue_Mock"}),", assign the function pointer ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue_Mock"})," to ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue"}),". After the test case finishes, restore the original reference so that only that test case uses ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue_Mock"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",metastring:'title="Test Code test case using real"',children:"void FileCtrl_EnQueue_Mock(ST_QUEUE_ELEMENT* el) {\n    // Test double processing\n}\n\nTEST_F(TestLogSave, TestCaseUsingFileCtrl_EnQueue) {\n\nvoid (*FileCtrl_EnQueue_Saved)(ST_QUEUE_ELEMENT* el);\n    // Pre-test setup\n    FileCtrl_EnQueue_Saved = FileCtrl_EnQueue;\n    FileCtrl_EnQueue = FileCtrl_EnQueue_Mock;\n\n    // Perform assertions using FileCtrl_EnQueue_Mock\n    // ..\n\n    // Post-test cleanup\n    FileCtrl_EnQueue = FileCtrl_EnQueue_Saved;\n}\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"Tips for GoogleTest",type:"info",children:[(0,i.jsxs)(n.p,{children:["When you want to use ",(0,i.jsx)(n.code,{children:"FileCtrl_EnQueue_Mock"})," throughout a test file in GoogleTest, defining ",(0,i.jsx)(n.code,{children:"SetUp()"})," like below will eliminate the need to assign the pointer in each test case. This makes the tests easier to read."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",metastring:'title="Test Code tetst class"',children:"class TestLogSave: public ::testing::Test {\n  protected:\n    void (*FileCtrl_EnQueue_Saved)(ST_QUEUE_ELEMENT* el);\n\n    void SetUp() override {\n        // Use mock (FileCtrl_EnQueue_Mock) for FileCtrl_EnQueue\n        FileCtrl_EnQueue_Saved = FileCtrl_EnQueue;\n        FileCtrl_EnQueue = FileCtrl_EnQueue_Mock;\n    }\n\n    void TearDown() override {\n        // Restore FileCtrl_EnQueue to reference the product code (FileCtrl_EnQueue_Real)\n        FileCtrl_EnQueue = FileCtrl_EnQueue_Saved;\n    }\n};\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",metastring:'title="Test Code test case using mock"',children:"TEST_F(TestLogSave, TestCaseUsingFileCtrl_EnQueue) {\n  // ..\n}\n"})})]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);