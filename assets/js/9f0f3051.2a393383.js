"use strict";(self.webpackChunkguide=self.webpackChunkguide||[]).push([[31],{1967:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(4848),d=r(8453);const i={sidebar_position:2},s="Building Test Code",l={id:"setup/build",title:"Building Test Code",description:"Build using CMake. As an example, here is the CMakeLists.txt to build the sample code in this repository. You will need to modify it to suit your project directory structure.",source:"@site/docs/setup/build.md",sourceDirName:"setup",slug:"/setup/build",permalink:"/embeded-testing-guide/docs/setup/build",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/setup/build.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installing Google Test",permalink:"/embeded-testing-guide/docs/setup/googletest"},next:{title:"Test Execution Script",permalink:"/embeded-testing-guide/docs/setup/exec"}},o={},c=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"CMakeLists.txt for Double Library Generation",id:"cmakeliststxt-for-double-library-generation",level:3},{value:"CMakeLists.txt for Building the Product Code ledCtrl Library",id:"cmakeliststxt-for-building-the-product-code-ledctrl-library",level:3},{value:"CMakeLists.txt for Generating the Test Executable",id:"cmakeliststxt-for-generating-the-test-executable",level:3}];function a(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"building-test-code",children:"Building Test Code"})}),"\n",(0,n.jsx)(t.p,{children:"Build using CMake. As an example, here is the CMakeLists.txt to build the sample code in this repository. You will need to modify it to suit your project directory structure."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The product code is located under the ",(0,n.jsx)(t.code,{children:"product"})," directory."]}),"\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"test"})," directory contains both the ",(0,n.jsx)(t.code,{children:"double"})," directory and the ",(0,n.jsx)(t.code,{children:"test"})," directory.","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"test/double"})," directory contains double code, used to replace code that only runs on the microcontroller during test execution."]}),"\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"test/test"})," directory contains the test code."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-markdown",metastring:'title="Structure of sample code"',children:"code\n  \u251c\u2500 product\n  |   \u251c\u2500 ..\n  |   \u2514\u2500 ledCtrl\n  |        \u251c\u2500 led.c\n  |        \u251c\u2500 led.h\n  |        \u251c\u2500 ledCtrl.c\n  |        \u251c\u2500 ledCtrl.h\n  |        \u2514\u2500 CMakeLists.txt\n  \u2514\u2500 test\n      \u251c\u2500 double\n      |    \u251c\u2500 ..\n      |    \u251c\u2500 led.c\n      |    \u251c\u2500 led.h\n      |    \u2514\u2500 CMakeLists.txt\n      \u2514\u2500 test\n           \u251c\u2500 testLedCtrl.cpp\n           \u251c\u2500 ..\n           \u251c\u2500 testMain.cpp\n           \u2514\u2500 CMakeLists.txt\n"})}),"\n",(0,n.jsx)(t.h3,{id:"cmakeliststxt-for-double-library-generation",children:"CMakeLists.txt for Double Library Generation"}),"\n",(0,n.jsxs)(t.p,{children:["During test execution, it is necessary to replace the code that only runs on the microcontroller with doubles. ",(0,n.jsx)(t.code,{children:"code/test/double/CMakeLists.txt"})," is needed to build the double code and generate the double library."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cmake",metastring:'title="code/test/test/CMakeLists.txt"',children:"# Create the double library\nadd_library(double SHARED\n  board.c\n  led.c\n)\n\ntarget_include_directories(double PUBLIC ${PROJECT_SOURCE_DIR}/test/double)\n"})}),"\n",(0,n.jsx)(t.h3,{id:"cmakeliststxt-for-building-the-product-code-ledctrl-library",children:"CMakeLists.txt for Building the Product Code ledCtrl Library"}),"\n",(0,n.jsxs)(t.p,{children:["The product code under test is built and turned into a library. By using ",(0,n.jsx)(t.code,{children:"include_directories(../test/double)"}),", the double library is included to resolve dependencies."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cmake",metastring:'title="code/product/ledCtrl/CMakeLists.txt"',children:"# Define environment variables\nadd_definitions(-DTEST_ENV)\n\n# Include double for resolving dependencies\ninclude_directories(../test/double)\n\n# Create the ledCtrl library\nadd_library(ledCtrl SHARED\n  ledCtrl.c\n  ledImpl.c\n)\n\ntarget_include_directories(ledCtrl PUBLIC ${PROJECT_SOURCE_DIR}/product/led)\ntarget_link_libraries(ledCtrl double)\n"})}),"\n",(0,n.jsx)(t.h3,{id:"cmakeliststxt-for-generating-the-test-executable",children:"CMakeLists.txt for Generating the Test Executable"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"code/test/test/CMakeLists.txt"})," is used to build the test executable. Once the build is successful, the test executable is generated."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cmake",metastring:'title="code/test/test/CMakeLists.txt"',children:'cmake_minimum_required(VERSION 3.14)\nproject(embeded-testing-guide\n    DESCRIPTION "google test for embeded code"\n    HOMEPAGE_URL "https://github.com/kimatata/embeded-testing-guide"\n)\n\n# Coverage flags for GCC/Clang\nset(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage")\nset(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --coverage")\nset(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --coverage")\n\n# Locate GTest (includes Google Mock as well)\nfind_package(GTest REQUIRED)\n\ninclude_directories(${GTEST_INCLUDE_DIRS})\n\n# Add the ledCtrl library directory\nadd_subdirectory(../double/ build/double)\nadd_subdirectory(../../product/armCtrl build/armCtrl)\nadd_subdirectory(../../product/counter build/counter)\nadd_subdirectory(../../product/fileManager build/fileManager)\nadd_subdirectory(../../product/ledCtrl build/ledCtrl)\n\n# Link runTests with what we want to test and the GTest and pthread library\nadd_executable(runTests testMain.cpp)\ntarget_link_libraries(runTests ${GTEST_LIBRARIES} gmock gmock_main pthread double armCtrl counter fileManager ledCtrl)\n'})})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>l});var n=r(6540);const d={},i=n.createContext(d);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);