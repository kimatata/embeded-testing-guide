"use strict";(self.webpackChunkguide=self.webpackChunkguide||[]).push([[522],{763:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var i=n(4848),s=n(8453);const r={sidebar_position:2},d="Building Test Code",l={id:"environment/build",title:"Building Test Code",description:"Build using CMake.",source:"@site/docs/environment/build.md",sourceDirName:"environment",slug:"/environment/build",permalink:"/embeded-testing-guide/docs/environment/build",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/environment/build.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installing Google Test",permalink:"/embeded-testing-guide/docs/environment/googletest"},next:{title:"Running Tests",permalink:"/embeded-testing-guide/docs/environment/exec"}},o={},a=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"CMakeLists.txt",id:"cmakeliststxt",level:2},{value:"Project",id:"project",level:3},{value:"Test Code",id:"test-code",level:3},{value:"Doubles",id:"doubles",level:3},{value:"Production Code",id:"production-code",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"building-test-code",children:"Building Test Code"})}),"\n",(0,i.jsx)(t.p,{children:"Build using CMake."}),"\n",(0,i.jsx)(t.p,{children:"Here is an example of a CMakeLists.txt for building the sample code in this repository. You will need to modify it according to the directory structure of your project."}),"\n",(0,i.jsx)(t.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-markdown",children:"`code`\n\u251c\u2500 `product`\n|    \u251c\u2500 `led`\n|    \u2514\u2500 `fileManger`\n\u251c\u2500 `test`\n|    \u251c\u2500 `test`\n|    |     \u251c\u2500 `testled.cpp`\n|    |     \u2514\u2500 `testFileManager.cpp`\n|    \u2514\u2500 `double`\n\u2514\u2500 `CMakeLists.txt`\n"})}),"\n",(0,i.jsx)(t.h2,{id:"cmakeliststxt",children:"CMakeLists.txt"}),"\n",(0,i.jsx)(t.h3,{id:"project",children:"Project"}),"\n",(0,i.jsxs)(t.p,{children:["Register the ",(0,i.jsx)(t.code,{children:"CMakeLists.txt"})," files in subdirectories."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-CMakeLists.txt",metastring:'title="./CMakeLists.txt"',children:"cmake_minimum_required(VERSION 3.13)\nproject(test_suite)\n\n# Register subdirectories\nadd_subdirectory(product)\nadd_subdirectory(test/test)\n"})}),"\n",(0,i.jsx)(t.h3,{id:"test-code",children:"Test Code"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-CMakeLists.txt",metastring:'title="test/test/CMakeLists.txt"',children:"# Include GTest\nfind_package(GTest REQUIRED)\ninclude_directories(${GTEST_INCLUDE_DIRS})\n\n# Create an executable\nadd_executable(runTestSuite testled.cpp testFileManager.cpp)\n\n# Link necessary libraries when compiling runTestSuite\ntarget_link_libraries(runTestSuite ${GTEST_LIBRARIES} pthread led fileManger doubles)\n"})}),"\n",(0,i.jsx)(t.h3,{id:"doubles",children:"Doubles"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-CMakeLists.txt",metastring:'title="Test/double/CMakeLists.txt"',children:"# Create the doubles library\nadd_library(doubles SHARED\n    ledCtrl.c\n    fileCtrl.c\n)\n\ntarget_include_directories(doubles PUBLIC ${PROJECT_SOURCE_DIR}/test/double)\n"})}),"\n",(0,i.jsx)(t.h3,{id:"production-code",children:"Production Code"}),"\n",(0,i.jsxs)(t.p,{children:["As more production code is added, create additional ",(0,i.jsx)(t.code,{children:"CMakeLists.txt"})," files in each folder."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-CMakeLists.txt",metastring:'title="led/CMakeLists.txt"',children:"# Define environment variables\nadd_definitions(-DTEST_ENV)\n\n# Include doubles for resolving dependencies\ninclude_directories(../Test/double)\n\n# Create the led library\nadd_library(led SHARED\n  src/led/ledCtrl.c\n  src/led/ledImple.c\n)\n\ntarget_include_directories(led PUBLIC ${PROJECT_SOURCE_DIR}/led)\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-CMakeLists.txt",metastring:'title="fileManager/CMakeLists.txt"',children:"# environment variables\nadd_definitions(-DTEST_ENV)\n\n# Include doubles for resolving dependencies\ninclude_directories(../Test/double)\n\n# Create the fileManager library\nadd_library(fileManager SHARED\n  src/fileManager/fileCtrl.c\n)\n\ntarget_include_directories(fileManager PUBLIC ${PROJECT_SOURCE_DIR}/fileManager)\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>l});var i=n(6540);const s={},r=i.createContext(s);function d(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);